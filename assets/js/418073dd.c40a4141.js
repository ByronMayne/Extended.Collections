"use strict";(self.webpackChunkextended_collections=self.webpackChunkextended_collections||[]).push([[21],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>m});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function f(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):f(f({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(r),p=i,m=d["".concat(c,".").concat(p)]||d[p]||s[p]||o;return r?t.createElement(m,f(f({ref:n},u),{},{components:r})):t.createElement(m,f({ref:n},u))}));function m(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,f=new Array(o);f[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[d]="string"==typeof e?e:i,f[1]=a;for(var l=2;l<o;l++)f[l]=r[l];return t.createElement.apply(null,f)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5381:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>f,default:()=>s,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=r(7462),i=(r(7294),r(3905));const o={},f="Ring Buffer",a={unversionedId:"generic/ring_buffer",id:"generic/ring_buffer",title:"Ring Buffer",description:"A ring buffer is a data structure that efficiently manages a fixed-size, cyclically-referenced buffer, allowing for constant-time insertions and removals while overwriting the oldest data when full.",source:"@site/../documentation/generic/ring_buffer.md",sourceDirName:"generic",slug:"/generic/ring_buffer",permalink:"/Extended.Collections/generic/ring_buffer",draft:!1,editUrl:"https://github.com/ByronMayne/Extended.Collections/edit/main/documentation/generic/ring_buffer.md",tags:[],version:"current",lastUpdatedAt:1694476629,formattedLastUpdatedAt:"Sep 11, 2023",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Introduction",permalink:"/Extended.Collections/"},next:{title:"Ordered Dictionary",permalink:"/Extended.Collections/generic/specialized/ordered_dictionary"}},c={},l=[],u={toc:l},d="wrapper";function s(e){let{components:n,...r}=e;return(0,i.kt)(d,(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ring-buffer"},"Ring Buffer"),(0,i.kt)("p",null,"A ring buffer is a data structure that efficiently manages a fixed-size, cyclically-referenced buffer, allowing for constant-time insertions and removals while overwriting the oldest data when full."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title=RingBufferSandbox.cs",title:"RingBufferSandbox.cs"},'using Extended.Collections.Generic;\n\nnamespace Extended.Collections.Playground.Generic\n{\n    public class RingBufferSandbox : Sandbox\n    {\n        private readonly RingBuffer<string> m_buffer;\n\n        public RingBufferSandbox()\n        {\n            m_buffer = new RingBuffer<string>(3);\n        }\n\n        protected override void Run()\n        {\n            m_buffer.Add("A");\n            m_buffer.Add("B");\n            m_buffer.Add("C");\n            Logger.Information("1. {Buffer}", m_buffer); // 1. [ "A", "B", "C" ]\n\n            m_buffer.Add("D");\n            Logger.Information("2. {Buffer}", m_buffer); // 2. [ "B", "C", "D" ]\n\n            m_buffer.Remove("C");\n            Logger.Information("3. {Buffer}", m_buffer); // 3. [ "B", "D" ]\n\n            m_buffer.Add("E");\n            Logger.Information("4. {Buffer}", m_buffer); // 4. [ "B", "D", "E" ]\n\n            m_buffer.Clear();\n            Logger.Information("5. {Buffer}", m_buffer); // [ ]\n        }\n    }\n}\n')))}s.isMDXComponent=!0}}]);
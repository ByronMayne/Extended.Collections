"use strict";(self.webpackChunkextended_collections=self.webpackChunkextended_collections||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"defaultSidebar":[{"type":"link","label":"Introduction","href":"/Extended.Collections/","docId":"index"},{"type":"category","label":"Generic","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Specialized","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Lazy Dictionary","href":"/Extended.Collections/generic/specialized/lazy_dictionary","docId":"generic/specialized/lazy_dictionary"},{"type":"link","label":"Ordered Dictionary","href":"/Extended.Collections/generic/specialized/ordered_dictionary","docId":"generic/specialized/ordered_dictionary"}]},{"type":"link","label":"Deque","href":"/Extended.Collections/generic/deque","docId":"generic/deque"},{"type":"link","label":"Ring Buffer","href":"/Extended.Collections/generic/ring_buffer","docId":"generic/ring_buffer"}]}]},"docs":{"generic/deque":{"id":"generic/deque","title":"Deque","description":"A double-ended queue, often abbreviated as \\"deque\\" (pronounced as \\"deck\\"), is a linear data structure that allows elements to be added or removed from both ends efficiently. It is an extension of a queue and a stack, providing operations for adding and removing elements from the front and back. Deques can be implemented using arrays or linked lists, and they are useful in scenarios where you need to perform insertions and deletions at both ends of the data structure.","sidebar":"defaultSidebar"},"generic/ring_buffer":{"id":"generic/ring_buffer","title":"Ring Buffer","description":"A ring buffer is a data structure that efficiently manages a fixed-size, cyclically-referenced buffer, allowing for constant-time insertions and removals while overwriting the oldest data when full.","sidebar":"defaultSidebar"},"generic/specialized/lazy_dictionary":{"id":"generic/specialized/lazy_dictionary","title":"Lazy Dictionary","description":"A dictionary implementation that creates adds new values when a key is accessed that does not exist.","sidebar":"defaultSidebar"},"generic/specialized/ordered_dictionary":{"id":"generic/specialized/ordered_dictionary","title":"Ordered Dictionary","description":"Combines the features of a dictionary and a list, allowing key-value pairs to be stored in a specific order and accessed efficiently by their keys.","sidebar":"defaultSidebar"},"index":{"id":"index","title":"Introduction","description":"Collections Extended a zero dependency netstandard library that contains an array of different generic collections to use in any application. Each collection has it\'s own use","sidebar":"defaultSidebar"}}}')}}]);